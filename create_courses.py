import sqlite3
import random

# 科目データを定義
# 各学科の科目リスト
経済学科_科目 = [
    'ミクロ経済学I',
    'ミクロ経済学II',
    'マクロ経済学I',
    'マクロ経済学II',
    '経済数学I',
    '経済数学II',
    '統計学I',
    '統計学II',
    '経済史',
    '経済学の基礎',
    '国際経済学',
    '貨幣金融論',
    '公共経済学',
    '労働経済学',
    '産業組織論',
    '開発経済学',
    '環境経済学',
    '経済政策論',
    '財政学',
    '企業経営学',
    'マーケティング論',
    '会計学',
    '経営情報システム',
    '金融論',
    '経済法',
    '数量経済学I',
    '数量経済学II',
    '経済思想史',
    '経済地理学',
    '行動経済学',
    'ゲーム理論',
    'ネットワーク経済学',
    '金融工学',
    '資産価格理論',
    '経済成長理論',
    '国際金融論',
    '労働市場分析',
    '企業統治',
    '組織論',
    '産業政策',
    '資源経済学',
    '都市経済学',
    '農業経済学',
    '医療経済学',
    '教育経済学',
    '情報経済学',
    '経済社会システム論',
    '経済データ分析',
    '経済モデリング',
    '経済政策シミュレーション',
]

心理学科_科目 = [
    '心理学概論',
    '心理学研究法I',
    '心理学研究法II',
    '統計学I',
    '統計学II',
    '生理心理学',
    '認知心理学',
    '発達心理学',
    '社会心理学',
    'パーソナリティ心理学',
    '臨床心理学I',
    '臨床心理学II',
    '精神病理学',
    '心理療法I',
    '心理療法II',
    '児童心理学',
    '青年心理学',
    '老年心理学',
    '家族心理学',
    '組織心理学',
    '教育心理学',
    '犯罪心理学',
    'スポーツ心理学',
    '広告心理学',
    '消費者心理学',
    '医療心理学',
    '司法心理学',
    '災害心理学',
    '異文化心理学',
    '神経心理学',
    '行動分析学',
    '認知行動療法',
    '精神力動療法',
    'システム論的家族療法',
    'ゲシュタルト療法',
    '心理アセスメントI',
    '心理アセスメントII',
    '質的研究法',
    '心理学と文化',
    '心理学と社会',
    '心理学と脳科学',
    '心理学と健康',
    '心理学と教育',
    '心理学とビジネス',
    '心理学と法',
    '心理学とメディア',
    '心理学と倫理',
    '心理学とジェンダー',
    '心理学と発達障害',
    '心理学とグローバル社会',
]

機械学科_科目 = [
    '機械工学概論',
    '微分積分I',
    '微分積分II',
    '線形代数',
    '物理学I (力学)',
    '物理学II (熱力学)',
    '化学',
    'プログラミング基礎',
    '機械製図',
    '電気回路',
    '材料力学',
    '運動力学',
    '熱力学',
    '流体力学',
    '伝熱工学',
    '振動工学',
    '制御工学',
    '機械設計',
    '要素設計',
    '潤滑・振動',
    'データベース',
    '生産工学',
    '品質管理',
    '機械加工',
    'ロボティクス',
    'CAD/CAM',
    '3Dプリンティング',
    '複合材料',
    '航空力学',
    '自動車工学',
    '構造解析',
    '有限要素法',
    '複合流体',
    'エネルギー変換',
    '太陽光発電',
    '風力発電',
    '原子力工学',
    '燃料電池',
    '宇宙工学',
    'バイオメカニクス',
    '精密工学',
    'マイクロマシン',
    'ナノテクノロジー',
    '知能機械',
    '機械学習',
    'メンテナンス工学',
    '環境機械',
    '安全工学',
    '信頼性工学',
    '機械システム設計',
]

生物学科_科目 = [
    '生物学概論',
    '生物化学',
    '分子生物学',
    '細胞生物学',
    '遺伝学',
    '生態学',
    '進化論',
    '植物生理学',
    '動物生理学',
    '統計学',
    '微生物学',
    '免疫学',
    '分子遺伝学',
    '発生生物学',
    '神経生物学',
    '行動生態学',
    '植物分類学',
    '動物分類学',
    '環境生理学',
    '比較生理学',
    'ゲノム科学',
    'プロテオミクス',
    'バイオインフォマティクス',
    '植物病理学',
    '動物病理学',
    '昆虫学',
    '海洋生物学',
    '淡水生物学',
    '森林生態学',
    '園芸学',
    '分子進化',
    '系統分類学',
    '発生遺伝学',
    '神経伝達',
    '行動神経科学',
    '集団遺伝学',
    '環境毒性学',
    '生物多様性保全',
    '植物育種学',
    '動物行動学',
    '生物統計学',
    '分子薬理学',
    '幹細胞生物学',
    '感染症生物学',
    '植物生理生態学',
    '動物生理生態学',
    'ゲノム編集',
    '合成生物学',
    'バイオテクノロジー',
    '環境微生物学',
]

情報学科_科目 = [
    '情報科学概論',
    'プログラミング入門',
    'データ構造とアルゴリズム',
    '離散数学',
    '情報理論',
    'コンピュータアーキテクチャ',
    'オペレーティングシステム',
    'データベースシステム',
    'ネットワーク基礎',
    '電気回路と電子回路',
    'オブジェクト指向プログラミング',
    'Webプログラミング',
    '人工知能入門',
    '機械学習',
    '深層学習',
    '自然言語処理',
    '画像処理',
    'データベース応用',
    'ネットワークセキュリティ',
    'システムプログラミング',
    'モバイルプログラミング',
    'ゲームプログラミング',
    '情報セキュリティ',
    'ソフトウェア工学',
    'ヒューマンコンピュータインタラクション',
    'コンピュータグラフィックス',
    '分散システム',
    'クラウドコンピューティング',
    'データマイニング',
    'ビッグデータ解析',
    '計算機科学理論',
    '暗号理論',
    '情報倫理',
    'ソフトウェアテスト',
    'プロジェクトマネジメント',
    '組み込みシステム',
    'ロボティクス',
    'IoT (Internet of Things)',
    'ブロックチェーン',
    '量子コンピュータ',
    'データサイエンス',
    'バイオインフォマティクス',
    'メディア情報学',
    '知的財産',
    '仮想現実 (VR) / 拡張現実 (AR)',
    '認知科学',
    'ユーザビリティ',
    '情報可視化',
    '推薦システム',
    '自然言語理解',
]

# データベースに接続
conn = sqlite3.connect('履修登録.sqlite')
cursor = conn.cursor()

# テーブルが存在しない場合に作成
cursor.execute('''
    CREATE TABLE IF NOT EXISTS 科目 (
        ID INTEGER PRIMARY KEY AUTOINCREMENT,
        名前 TEXT NOT NULL,
        学科ID INTEGER NOT NULL,
        教員ID INTEGER NOT NULL,
        単位数 INTEGER NOT NULL,
        FOREIGN KEY (学科ID) REFERENCES 学科(ID),
        FOREIGN KEY (教員ID) REFERENCES 教員(ID)
    )
''')

# 科目をデータベースに挿入する関数
def insert_courses(学科名, courses):
    """
    指定された学科の科目をデータベースに挿入します。

    Args:
        学科名 (str): 学科の名前。
        courses (list): 科目のリスト。
    """
    # 学科IDを取得
    cursor.execute("SELECT ID FROM 学科 WHERE 名前 = ?", (学科名,))
    学科ID = cursor.fetchone()

    if not 学科ID:
        print(f"Error: 学科 '{学科名}' がデータベースに存在しません。")
        return

    学科ID = 学科ID[0]  # タプルからIDを取り出す

    # 各科目を挿入
    for course in courses:
        # 教員IDをランダムに選択
        cursor.execute("SELECT ID FROM 教員 WHERE 学科ID = ?", (学科ID,))
        教員IDs = cursor.fetchall()

        if not 教員IDs:
            print(f"Error: 学科ID '{学科ID}' の教員がデータベースに存在しません。")
            continue

        教員ID = random.choice(教員IDs)[0]

        # 科目情報を挿入
        cursor.execute("INSERT INTO 科目 (名前, 学科ID, 教員ID, 単位数) VALUES (?, ?, ?, ?)", (course, 学科ID, 教員ID, 2))

# 科目をデータベースに挿入
insert_courses("経済学科", 経済学科_科目)
insert_courses("心理学科", 心理学科_科目)
insert_courses("機械学科", 機械学科_科目)
insert_courses("生物学科", 生物学科_科目)
insert_courses("情報学科", 情報学科_科目)

# 変更をコミット
conn.commit()

# データベースに接続を閉じる
conn.close()

print("データ挿入完了")